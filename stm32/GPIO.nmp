let component = "GPIO"
let arch = "stm32"
let license = "GPL"
let copyright = "University of Toulouse 3"
let date = "19/05/2023"
//let name = "GPIO%{CNUM}"


type bit = card(1)
type word = card(32)
type mode_ = card(2)

/* Declare the modes */
let INPUT : mode_ = 0b00
let OUTPUT : mode_ = 0b01
let ALTERNATE : mode_ = 0b10
let ANALOG : mode_ = 0b11

reg MODER[1, word] /* define the mode : input, output, alternate function */ 
	label = format("GPIO%c_MODER", 'A' + __COMP_NUM)
  offset = 0x00

reg ODR[1, word]   /* set or read the output */ 
    offset = 0x14

reg IDR[1, word]   /* provide the current input state of each pin within a GPIO port */ 
    offset = 0x10
    readonly = 1

reg BSRR[1, word] /* provide a convenient way to set or clear individual pins within a GPIO port  */
    offset = 0x18

reg LCKR[1, word] /* enable you to lock or unlock the configuration of individual pins within a GPIO port*/
  offset = 0x20

let listen = 2

port PIN(16, bit)
	label = format("P%c%d", 'A' + __COMP_NUM, __INDEX)
    on_update = {
        for i in 0 .. 15 do
            if MODER<2*i+1 .. 2*i> == OUTPUT then
                PIN[i] = ODR<i..i>;		
            endif ;
        enddo ;
    }
    on_input = {
		if MODER<2*__INDEX+1 .. 2*__INDEX> == INPUT then
			IDR<__INDEX..__INDEX> = PIN[__INDEX];
		endif;
    }
  
